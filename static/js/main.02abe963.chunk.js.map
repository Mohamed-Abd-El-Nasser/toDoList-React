{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","todos","settodo","Task","setTask","displayTasks","map","todo","i","onClick","setto","splice","deletTask","className","type","value","onChange","e","target","length","setTask1","push","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAkFeA,MA9Ef,WAGA,MAAwBC,mBAAS,CAE/B,CAACC,KAAK,kBACN,CAACA,KAAK,gBACN,CAACA,KAAK,mBAJR,mBAAOC,EAAP,KAAaC,EAAb,KASA,EAAyBH,mBAAS,IAAlC,mBAAOI,EAAP,KAAcC,EAAd,KAUMC,EAAeJ,EAAMK,KAAI,SAACC,EAAKC,GAWjB,OAPA,+BACA,qCAAQD,EAAKP,KAAb,OACA,wBAAQS,QAAS,kBAbnB,SAACD,GACX,IAAME,EAAK,YAAOT,GAClBS,EAAMC,OAAOH,EAAE,GACfN,EAAQQ,GAUyBE,CAAUJ,IAA/B,oBAFUA,MAmC5B,OACE,sBAAKK,UAAU,MAAf,UACI,0CACA,sBAAKA,UAAU,WAAf,UACI,uBAAOC,KAAK,OAAOC,MAAOZ,EAAMa,SA3BzB,SAACC,GAERb,EAAQa,EAAEC,OAAOH,UA0BjB,yBAAQN,QArBJ,WAEd,GAAIN,EAAKgB,OAEJ,CACH,IAAMC,EAAQ,YAAMnB,GACpBmB,EAASC,KAAK,CAACrB,KAAKG,IACpBC,EAAQ,IACRF,EAAQkB,QALAE,MAAM,8BAkBN,UACE,qBAAKT,UAAU,QACf,qBAAKA,UAAU,kBAGrB,oBAAIA,UAAU,gBAAd,SAAgCR,QC/DzBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02abe963.chunk.js","sourcesContent":["import React , {useState } from \"react\";\nimport './App.css';\n\n\nfunction App() {\n\n  \nconst [todos,settodo] = useState([\n\n  {text:\"creat homework\"},\n  {text:\"go to school\"},\n  {text:\"make the food\"}\n\n]);\n\n\nconst [Task , setTask] = useState('');\n\n\nconst deletTask = (i)=>{        \n        const setto = [...todos];\n        setto.splice(i,1);\n        settodo(setto);      \n}\n\n\nconst displayTasks = todos.map((todo,i)=>{\n\n                    const list = (\n                    \n                    <li key ={i}> \n                    <span> {todo.text} </span> \n                    <button onClick={()=>deletTask(i)}>Done</button>\n                    </li>\n                    \n                    );\n\n                    return list ;\n})\n\n\n\nconst updateTask = (e)=>{\n\n            setTask(e.target.value);\n          \n}\n\n\nconst addTask = ()=>{\n\n  if(!Task.length){\n            alert(\"You must write something!\")\n  }else{\n    const setTask1 =[...todos];\n    setTask1.push({text:Task});\n    setTask('')\n    settodo(setTask1);\n  }\n\n}\n\n\n\n\n  return (\n    <div className=\"App\">\n        <h1>Todo App</h1>\n        <div className=\"add_task\">\n            <input type=\"text\" value={Task} onChange={updateTask}/>\n            <button onClick={addTask}>\n              <div className=\"hro\"></div>\n              <div className=\"virtcal\"></div>\n            </button>\n        </div>\n        <ul className=\"unorderd_list\">{ displayTasks }</ul>\n    </div>\n  );\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}